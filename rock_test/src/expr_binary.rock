//#prelude
import core:runtime as _.{assert}

//#entry "add_int"
//#expect
//#!
proc test_add_int() void {
    let a = 10;
    let b = -24;

    assert(10 + -24 == -14);
    assert(a + b == -14);
}

//#entry "add_float"
//#expect
//#!
proc test_add_float() void {
    let a = 10.0;
    let b = -24.0;

    assert(10.0 + -24.0 == -14.0);
    assert(a + b == -14.0);
}

//#entry "sub_int"
//#expect
//#!
proc test_sub_int() void {
    let a = 10;
    let b = -24;

    assert(10 - -24 == 34);
    assert(a - b == 34);
}

//#entry "sub_float"
//#expect
//#!
proc test_sub_float() void {
    let a = 10.0;
    let b = -24.0;

    assert(10.0 - -24.0 == 34.0);
    assert(a - b == 34.0);
}

//#entry "mul_int"
//#expect
//#!
proc test_mul_int() void {
    let a = 10;
    let b = -24;

    assert(10 * -24 == -240);
    assert(a * b == -240);
}

//#entry "mul_float"
//#expect
//#!
proc test_mul_float() void {
    let a = 10.0;
    let b = -24.0;

    assert(10.0 * -24.0 == -240.0);
    assert(a * b == -240.0);
}

//#entry "div_int_signed"
//#expect
//#!
proc test_div_int_signed() void {
    let a = 100;
    let b = -5;

    assert(100 / -5 == -20);
    assert(a / b == -20);
}

//#entry "div_int_unsigned"
//#expect
//#!
proc test_div_int_unsigned() void {
    let a: u8 = 0xFF;
    let b: u8 = 10;

    assert((0xFF as u8) / (10 as u8) == 25);
    assert(a / b == 25);
}

//#entry "div_float"
//#expect
//#!
proc test_div_float() void {
    let a = 100.0;
    let b = -5.0;

    assert(100.0 / -5.0 == -20.0);
    assert(a / b == -20.0);
}

//#entry "bit_and_const"
//#expect
//#!
proc test_bit_and_const() void {
    assert(0 & 0b10101010 == 0);
    assert(175 & 0b10101010 == 170);
    assert(0xFF & 0b10101010 == 170);
}

//#entry "bit_and_signed"
//#expect
//#!
proc test_bit_and_signed() void {
    let a: u8 = 0;
    let b: u8 = 175;
    let c: u8 = 0xFF;
    let m: u8 = 0b10101010;

    assert(a & m == 0);
    assert(b & m == 170);
    assert(c & m == 170);
}

//#entry "bit_and_unsigned"
//#expect
//#!
proc test_bit_and_unsigned() void {
    let a: s8 = 0;
    let b: s8 = 56;
    let c: s8 = 127;
    let m: s8 = 0b1010101;

    assert(a & m == 0);
    assert(b & m == 16);
    assert(c & m == 85);
}

//#entry "bit_or_const"
//#expect
//#!
proc test_bit_or_const() void {
    assert(0 | 0b10101010 == 170);
    assert(175 | 0b10101010 == 175);
    assert(0xFF | 0b10101010 == 255);
}

//#entry "bit_or_signed"
//#expect
//#!
proc test_bit_or_signed() void {
    let a: u8 = 0;
    let b: u8 = 175;
    let c: u8 = 0xFF;
    let m: u8 = 0b10101010;

    assert(a | m == 170);
    assert(b | m == 175);
    assert(c | m == 255);
}

//#entry "bit_or_unsigned"
//#expect
//#!
proc test_bit_or_unsigned() void {
    let a: s8 = 0;
    let b: s8 = 56;
    let c: s8 = 127;
    let m: s8 = 0b1010101;

    assert(a | m == 85);
    assert(b | m == 125);
    assert(c | m == 127);
}

//#entry "bit_xor_const"
//#expect
//#!
proc test_bit_xor_const() void {
    assert(0 ^ 0b10101010 == 170);
    assert(175 ^ 0b10101010 == 5);
    assert(0xFF ^ 0b10101010 == 85);
}

//#entry "bit_xor_signed"
//#expect
//#!
proc test_bit_xor_signed() void {
    let a: u8 = 0;
    let b: u8 = 175;
    let c: u8 = 0xFF;
    let m: u8 = 0b10101010;

    assert(a ^ m == 170);
    assert(b ^ m == 5);
    assert(c ^ m == 85);
}

//#entry "bit_xor_unsigned"
//#expect
//#!
proc test_bit_xor_unsigned() void {
    let a: s8 = 0;
    let b: s8 = 56;
    let c: s8 = 127;
    let m: s8 = 0b1010101;

    assert(a ^ m == 85);
    assert(b ^ m == 109);
    assert(c ^ m == 42);
}

//#entry "char_eq"
//#expect
//#!
proc test_char_eq() void {
    let a = 'a';
    let b = 'b';

    assert('a' == 'a' == true);
    assert('a' == 'b' == false);
    assert('b' == 'a' == false);

    assert(a == a == true);
    assert(a == b == false);
    assert(b == a == false);
}

//#entry "char_not_eq"
//#expect
//#!
proc test_char_not_eq() void {
    let a = 'a';
    let b = 'b';

    assert('a' != 'a' == false);
    assert('a' != 'b' == true);
    assert('b' != 'a' == true);

    assert(a != a == false);
    assert(a != b == true);
    assert(b != a == true);
}

//#entry "rawptr_eq"
//#expect
//#!
proc test_rawptr_eq() void {
    let a = null;
    let b = &a as rawptr;

    assert(null == null == true);

    assert(a == a == true);
    assert(a == b == false);
    assert(b == a == false);
}

//#entry "rawptr_not_eq"
//#expect
//#!
proc test_rawptr_not_eq() void {
    let a = null;
    let b = &a as rawptr;

    assert(null != null == false);

    assert(a != a == false);
    assert(a != b == true);
    assert(b != a == true);
}

//#entry "bool_eq"
//#expect
//#!
proc test_bool_eq() void {
    let a: bool = true;
    let b: bool = false;
    let a32: bool32 = true;
    let b32: bool32 = false;

    assert(true == true == true);
    assert(true == false == false);
    assert(false == true == false);

    assert(a == a == true);
    assert(a == b == false);
    assert(b == a == false);

    assert(a32 == a32 == true);
    assert(a32 == b32 == false);
    assert(b32 == a32 == false);
}

//#entry "bool_not_eq"
//#expect
//#!
proc test_bool_not_eq() void {
    let a: bool = true;
    let b: bool = false;
    let a32: bool32 = true;
    let b32: bool32 = false;

    assert(true != true == false);
    assert(true != false == true);
    assert(false != true == true);

    assert(a != a == false);
    assert(a != b == true);
    assert(b != a == true);

    assert(a32 != a32 == false);
    assert(a32 != b32 == true);
    assert(b32 != a32 == true);
}

//#entry "string_eq"
//#expect
//#!
proc test_string_eq() void {
    let a: string = "one";
    let b: string = "two";
    let ac: cstring = "one";
    let bc: cstring = "two";

    assert("one" == "one" == true);
    assert("one" == "two" == false);
    assert("two" == "one" == false);

    assert(a == a == true);
    assert(a == b == false);
    assert(b == a == false);

    assert(ac == ac == true);
    assert(ac == bc == false);
    assert(bc == ac == false);
}

//#entry "string_not_eq"
//#expect
//#!
proc test_string_not_eq() void {
    let a: string = "one";
    let b: string = "two";
    let ac: cstring = "one";
    let bc: cstring = "two";

    assert("one" != "one" == false);
    assert("one" != "two" == true);
    assert("two" != "one" == true);

    assert(a != a == false);
    assert(a != b == true);
    assert(b != a == true);

    assert(ac != ac == false);
    assert(ac != bc == true);
    assert(bc != ac == true);
}

//#entry "enum_eq"
//#expect
//#!
enum EnumEq s32 {
    A = 0,
    B = 10,
    C = -20,
}

proc test_enum_eq() void {
    let zero = EnumEq.A;
    let pos = EnumEq.B;
    let neg = EnumEq.C;

    assert(EnumEq.A == .A == true);
    assert(EnumEq.A == .B == false);
    assert(EnumEq.A == .C == false);
    assert(EnumEq.B == .C == false);
    assert(EnumEq.C == .B == false);

    assert(zero == zero == true);
    assert(zero == pos == false);
    assert(zero == neg == false);
    assert(pos == neg == false);
    assert(neg == pos == false);
}

//#entry "enum_not_eq"
//#expect
//#!
enum EnumNotEq s32 {
    A = 0,
    B = 10,
    C = -20,
}

proc test_enum_not_eq() void {
    let zero = EnumNotEq.A;
    let pos = EnumNotEq.B;
    let neg = EnumNotEq.C;

    assert(EnumNotEq.A != .A == false);
    assert(EnumNotEq.A != .B == true);
    assert(EnumNotEq.A != .C == true);
    assert(EnumNotEq.B != .C == true);
    assert(EnumNotEq.C != .B == true);

    assert(zero != zero == false);
    assert(zero != pos == true);
    assert(zero != neg == true);
    assert(pos != neg == true);
    assert(neg != pos == true);
}

//#entry "int_eq"
//#expect
//#!
proc test_int_eq() void {
    let zero = 0;
    let pos = 10;
    let neg = -20;

    assert(0 == 0 == true);
    assert(0 == 10 == false);
    assert(0 == -20 == false);
    assert(10 == -20 == false);
    assert(-20 == 10 == false);

    assert(zero == zero == true);
    assert(zero == pos == false);
    assert(zero == neg == false);
    assert(pos == neg == false);
    assert(neg == pos == false);
}

//#entry "int_not_eq"
//#expect
//#!
proc test_int_not_eq() void {
    let zero = 0;
    let pos = 10;
    let neg = -20;

    assert(0 != 0 == false);
    assert(0 != 10 == true);
    assert(0 != -20 == true);
    assert(10 != -20 == true);
    assert(-20 != 10 == true);

    assert(zero != zero == false);
    assert(zero != pos == true);
    assert(zero != neg == true);
    assert(pos != neg == true);
    assert(neg != pos == true);
}

//#entry "int_less"
//#expect
//#!
proc test_int_less() void {
    let zero = 0;
    let pos = 10;
    let neg = -20;

    assert(0 < 0 == false);
    assert(0 < 10 == true);
    assert(0 < -20 == false);
    assert(10 < -20 == false);
    assert(-20 < 10 == true);

    assert(zero < zero == false);
    assert(zero < pos == true);
    assert(zero < neg == false);
    assert(pos < neg == false);
    assert(neg < pos == true);
}

//#entry "int_less_eq"
//#expect
//#!
proc test_int_less_eq() void {
    let zero = 0;
    let pos = 10;
    let neg = -20;

    assert(0 <= 0 == true);
    assert(0 <= 10 == true);
    assert(0 <= -20 == false);
    assert(10 <= -20 == false);
    assert(-20 <= 10 == true);

    assert(zero <= zero == true);
    assert(zero <= pos == true);
    assert(zero <= neg == false);
    assert(pos <= neg == false);
    assert(neg <= pos == true);
}

//#entry "int_greater"
//#expect
//#!
proc test_int_greater() void {
    let zero = 0;
    let pos = 10;
    let neg = -20;

    assert(0 > 0 == false);
    assert(0 > 10 == false);
    assert(0 > -20 == true);
    assert(10 > -20 == true);
    assert(-20 > 10 == false);

    assert(zero > zero == false);
    assert(zero > pos == false);
    assert(zero > neg == true);
    assert(pos > neg == true);
    assert(neg > pos == false);
}

//#entry "int_greater_eq"
//#expect
//#!
proc test_int_greater_eq() void {
    let zero = 0;
    let pos = 10;
    let neg = -20;

    assert(0 >= 0 == true);
    assert(0 >= 10 == false);
    assert(0 >= -20 == true);
    assert(10 >= -20 == true);
    assert(-20 >= 10 == false);

    assert(zero >= zero == true);
    assert(zero >= pos == false);
    assert(zero >= neg == true);
    assert(pos >= neg == true);
    assert(neg >= pos == false);
}

//#entry "float_eq"
//#expect
//#!
proc test_float_eq() void {
    let zero = 0.0;
    let pos = 10.2;
    let neg = -20.4;

    assert(0.0 == 0.0 == true);
    assert(0.0 == 10.2 == false);
    assert(0.0 == -20.4 == false);
    assert(10.2 == -20.4 == false);
    assert(-20.4 == 10.2 == false);

    assert(zero == zero == true);
    assert(zero == pos == false);
    assert(zero == neg == false);
    assert(pos == neg == false);
    assert(neg == pos == false);
}

//#entry "float_not_eq"
//#expect
//#!
proc test_float_not_eq() void {
    let zero = 0.0;
    let pos = 10.2;
    let neg = -20.4;

    assert(0.0 != 0.0 == false);
    assert(0.0 != 10.2 == true);
    assert(0.0 != -20.4 == true);
    assert(10.2 != -20.4 == true);
    assert(-20.4 != 10.2 == true);

    assert(zero != zero == false);
    assert(zero != pos == true);
    assert(zero != neg == true);
    assert(pos != neg == true);
    assert(neg != pos == true);
}

//#entry "float_less"
//#expect
//#!
proc test_float_less() void {
    let zero = 0.0;
    let pos = 10.2;
    let neg = -20.4;

    assert(0.0 < 0.0 == false);
    assert(0.0 < 10.2 == true);
    assert(0.0 < -20.4 == false);
    assert(10.2 < -20.4 == false);
    assert(-20.4 < 10.2 == true);

    assert(zero < zero == false);
    assert(zero < pos == true);
    assert(zero < neg == false);
    assert(pos < neg == false);
    assert(neg < pos == true);
}

//#entry "float_less_eq"
//#expect
//#!
proc test_float_less_eq() void {
    let zero = 0.0;
    let pos = 10.2;
    let neg = -20.4;

    assert(0.0 <= 0.0 == true);
    assert(0.0 <= 10.2 == true);
    assert(0.0 <= -20.4 == false);
    assert(10.2 <= -20.4 == false);
    assert(-20.4 <= 10.2 == true);

    assert(zero <= zero == true);
    assert(zero <= pos == true);
    assert(zero <= neg == false);
    assert(pos <= neg == false);
    assert(neg <= pos == true);
}

//#entry "float_greater"
//#expect
//#!
proc test_float_greater() void {
    let zero = 0.0;
    let pos = 10.2;
    let neg = -20.4;

    assert(0.0 > 0.0 == false);
    assert(0.0 > 10.2 == false);
    assert(0.0 > -20.4 == true);
    assert(10.2 > -20.4 == true);
    assert(-20.4 > 10.2 == false);

    assert(zero > zero == false);
    assert(zero > pos == false);
    assert(zero > neg == true);
    assert(pos > neg == true);
    assert(neg > pos == false);
}

//#entry "float_greater_eq"
//#expect
//#!
proc test_float_greater_eq() void {
    let zero = 0.0;
    let pos = 10.2;
    let neg = -20.4;

    assert(0.0 >= 0.0 == true);
    assert(0.0 >= 10.2 == false);
    assert(0.0 >= -20.4 == true);
    assert(10.2 >= -20.4 == true);
    assert(-20.4 >= 10.2 == false);

    assert(zero >= zero == true);
    assert(zero >= pos == false);
    assert(zero >= neg == true);
    assert(pos >= neg == true);
    assert(neg >= pos == false);
}

//#entry "logic_and"
//#expect
//#!
proc test_logic_and() void {
    let a: bool = true;
    let b: bool = false;
    let a32: bool32 = true;
    let b32: bool32 = false;

    assert((true && true) == true);
    assert((false && false) == false);
    assert((true && false) == false);
    assert((false && true) == false);

    assert((a && a) == true);
    assert((b && b) == false);
    assert((a && b) == false);
    assert((b && a) == false);

    assert((a32 && a32) == true);
    assert((b32 && b32) == false);
    assert((a32 && b32) == false);
    assert((b32 && a32) == false);
}

//#entry "logic_or"
//#expect
//#!
proc test_logic_or() void {
    let a: bool = true;
    let b: bool = false;
    let a32: bool32 = true;
    let b32: bool32 = false;

    assert((true || true) == true);
    assert((false || false) == false);
    assert((true || false) == true);
    assert((false || true) == true);

    assert((a || a) == true);
    assert((b || b) == false);
    assert((a || b) == true);
    assert((b || a) == true);

    assert((a32 || a32) == true);
    assert((b32 || b32) == false);
    assert((a32 || b32) == true);
    assert((b32 || a32) == true);
}
