//#prelude
import core:runtime.{assert}

STRING = "example";
EMPTY: [0]s32 = [];
ARRAY = [1, 2, 3];
ARRAY_ENUM = [Enum.A = 1, .B = 2, .C = 3];
STRUCT = Struct.{ x: 1, y: 2, inner: .{ z: 3, w: 4 } };

enum Enum {
    A,
    B,
    C,
}
struct Struct {
    x: s32,
    y: s32,
    inner: Inner,
}
struct Inner {
    z: s32,
    w: s32,
}

//#entry "field_struct"
proc test_field_struct() void {
    let value = STRUCT;
    assert(value.x == 1);
    assert(value.y == 2);
    assert(value.inner.z == 3);
    assert(value.inner.w == 4);

    //single auto-deref
    let ref = &value;
    assert(ref.x == 1);
    assert(ref.y == 2);
    assert(ref.inner.z == 3);
    assert(ref.inner.w == 4);

    //constant
    assert(STRUCT.x == 1);
    assert(STRUCT.y == 2);
    assert(STRUCT.inner.z == 3);
    assert(STRUCT.inner.w == 4);
}

//#entry "field_string"
proc test_field_string() void {
    let value = STRING;
    assert(value.len == 7);

    //single auto-deref
    let ref = &value;
    assert(ref.len == 7);

    //constant
    assert(STRING.len == 7);
}

//#entry "field_slice"
proc test_field_slice() void {
    let empty: []s32 = [][..];
    let array: []s32 = [1, 2, 3][..];
    assert(empty.len == 0);
    assert(array.len == 3);

    //single auto-deref
    let empty_ref = &empty;
    let array_ref = &array;
    assert(empty_ref.len == 0);
    assert(array_ref.len == 3);

    //pointer field equality
    assert(empty.ptr == empty_ref.ptr);
    assert(array.ptr == array_ref.ptr);
}

//#entry "field_array"
proc test_field_array() void {
    let empty: [0]s32 = EMPTY;
    let array = ARRAY;
    assert(empty.len == 0);
    assert(array.len == 3);

    //single auto-deref
    let empty_ref = &empty;
    let array_ref = &array;
    assert(empty_ref.len == 0);
    assert(array_ref.len == 3);

    //constant
    assert(EMPTY.len == 0);
    assert(ARRAY.len == 3);
}

//#entry "field_array_enum"
proc test_field_array_enum() void {
    let array = ARRAY_ENUM;
    assert(array.len == 3);

    //single auto-deref
    let array_ref = &array;
    assert(array_ref.len == 3);

    //constant
    assert(ARRAY_ENUM.len == 3);
}
